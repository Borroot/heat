#!/usr/bin/env bash
# AUTHOR: Bram Pulles

# This program can be used to extensively test all of the different versions we
# wrote for the heat diffusion computations. There are three verbosity levels
# 1, 2 and 3, where 1 can be used for piping, 2 is for normal usage and 3 is
# for debugging purposes.

# Show an error message.
error()
{
	>&2 echo "[Error] $@"
}

# Show usage information of the program.
usage()
{
	echo "usage: $0 [-n minN] [-N maxN] [-r minRANK] [-R maxRANK] [-t timeout]"
	echo "       [-e eps] [-h heat] [-i iterations] [-f folder] [-A] [-S] [-O] [-M]"
	echo "       [-a] [-H] [-v verbosity]"
	exit $1
}

# Cleanup all the files.
cleanup()
{
	(( VERBOSITY > 2 )) && echo -n "Cleaning up $1..."
	cd ${1:-.} && make clean --silent && cd - > /dev/null
	(( VERBOSITY > 2 )) && echo -e " finished!\n"
}

# Compile all of the programs.
compile()
{
	trap "cleanup; exit 1" SIGINT
	(( VERBOSITY > 2 )) && echo -n "Compiling $1..."
	cd ${1:-.} && make --silent && cd - > /dev/null
	(( VERBOSITY > 2 )) && echo -e " finished!\n"
}

# Parse the command line arguments and set the important variables.
arguments()
{
	declare opt minN maxN timeout eps heat ranks iterations folder verbosity \
	        hardware sequential openmp mpi minrank maxrank
	while getopts 'n:N:t:e:h:r:R:i:f:v:aASOMH' opt
	do
		case $opt in
			n) minN=$OPTARG           ;;
			N) maxN=$OPTARG           ;;
			r) minrank=$OPTARG        ;;
			R) maxrank=$OPTARG        ;;
			t) timeout=$OPTARG        ;;
			e) eps=$OPTARG            ;;
			h) heat=$OPTARG           ;;
			i) iterations=$OPTARG     ;;
			f) folder=$OPTARG         ;;
			v) verbosity=$OPTARG      ;;
			a) hardware=1             ;;
			A) seq=1; openmp=1; mpi=1 ;;
			S) seq=1                  ;;
			O) openmp=1               ;;
			M) mpi=1                  ;;
			H) usage 0                ;;
			?) usage 1                ;;
		esac
	done

	readonly MIN_N=${minN:-'100000'}
	readonly MAX_N=${maxN:-'10000000'}
	readonly MIN_RANK=${minrank:-'1'}
	readonly MAX_RANK=${maxrank:-'4'}
	readonly TIMEOUT=${timeout:-'3'}
	readonly EPS=${eps:-'0.1'}
	readonly HEAT=${heat:-'100.0'}
	readonly ITERATIONS=${iterations:-'1'}
	readonly FOLDER=$folder
	readonly VERBOSITY=${verbosity:-'2'}
	readonly HARDWARE=${hardware:-'0'}  # only show hardware info yes/no
	readonly TEST_SEQ=${seq:-'0'}
	readonly TEST_OPENMP=${openmp:-'0'}
	readonly TEST_MPI=${mpi:-'0'}
}

# Retrieve and show hardware information.
show_hardware()
{
	declare -r ARCH=$(  lscpu | grep "^Architecture" | sed -E 's/^.*: *(.*)/\1/g')
	declare -r CPUS=$(  lscpu | grep "^CPU(s)"       | sed -E 's/^.*: *(.*)/\1/g')
	declare -r MODEL=$( lscpu | grep "^Model name"   | sed -E 's/^.*: *(.*)/\1/g')
	declare -r MEMORY=$(lsmem | grep "^Total online" | sed -E 's/^.*: *(.*)/\1/g')

	if (( VERBOSITY > 1 ))
	then
		echo -e "Architecture: $ARCH"
		echo -e "CPU(s):       $CPUS"
		echo -e "CPU model:    $MODEL"
		echo -e "Memory size:  $MEMORY"
	else
		echo -e "$ARCH\n$CPUS\n$MODEL\n$MEMORY"
	fi

	[[ $HARDWARE == '1' ]] && exit 0 || echo
}

# Show the variables that are being used.
show_variables()
{
	if (( VERBOSITY > 1 ))
	then
		echo -e "Sequential: $TEST_SEQ"
		echo -e "OpenMP:     $TEST_OPENMP"
		echo -e "MPI:        $TEST_MPI\n"
		echo -e "Min N:      $MIN_N"
		echo -e "Max N:      $MAX_N"
		echo -e "Min rank:   $MIN_RANK"
		echo -e "Max rank:   $MAX_RANK"
		echo -e "Time-out:   $TIMEOUT"
		echo -e "Epsilon:    $EPS"
		echo -e "Heat:       $HEAT"
		echo -e "Iterations: $ITERATIONS\n"
	else
		echo -e "$MIN_N\n$MAX_N\n$MIN_RANK\n$MAX_RANK\n$TIMEOUT\n$EPS\n$HEAT"
		echo -e "$ITERATIONS"
	fi

	if (( TEST_SEQ + TEST_OPENMP + TEST_MPI == 0 ))
	then
		error "Please select at least one suite to test (-A, -S, -O, -M)."
		exit 1
	fi
}

# Set the FOLDERS variable correctly according to what the user chose.
folders()
{
	if [[ -z $FOLDER ]]
	then
		FOLDERS=$(find "$1" -mindepth 1 -type d)
	elif [[ -d $1/$FOLDER ]]
	then
		FOLDERS=$1/$FOLDER
	else
		FOLDERS=
		error "The folder $1/$FOLDER does not exist."
		return 1
	fi
}

# Print a nice header for a table.
header()
{
	if (( VERBOSITY > 1 ))
	then
		# Print the title of the table.
		if [[ $1 =~ ^mpi* ]]
		then
			echo -e "Test cases for $1 with rank $2."
		else
			echo -e "Test cases for $1."
		fi

		# Print the top bar of the table.
		printf '%-12s' 'N'
		for name in $3
		do
			printf '%-10s' "$name"
		done
		echo
	fi
}

# Run the tests with the given parameters, this will create one table.
run()
{
	declare pre=$1 folder=$2 progs=$3 names=$4 result count tmp

	header "$folder" "$rank" "$names"
	for (( N = MIN_N; N <= MAX_N; N = N * 10 ))
	do
		printf '%-12s' "$N"
		for prog in $progs
		do
			result=0.0
			count=0

			# Calculate the result a few times.
			for (( i = 0; i < ITERATIONS; i++ ))
			do
				tmp=$(timeout "$TIMEOUT" $pre ./"$prog" "$N" "$EPS" "$HEAT" 2> /dev/null)
				if [[ -n $tmp ]]
				then
					result=$(awk "BEGIN { print $result + $tmp }")
					count=$(( count += 1 ))
				fi
			done

			# Print the result.
			if [[ $count == '0' ]]
			then
				printf '%-10s' 'TIME-OUT'
			else
				result=$(awk "BEGIN { print $result / $count }")
				printf '%-10.6f' "$result"
			fi
		done
		echo
	done
	echo
}

# Run the tests for mpi.
run_mpi()
{
	for (( rank = MIN_RANK; rank <= MAX_RANK; rank++ ))
	do
		run "mpirun -N $rank" "$@"
	done
}

# Run all the tests for the given folder.
tests()
{
	folders "$1" || return 1
	compile "$1"

	declare folder progs names
	for folder in $FOLDERS
	do
		progs=$(find "$folder" -type f | grep -E 'relax_' | grep -v '\.[co]')
		names=$(echo "$progs" | sed -E 's;.*/;;g' | sed -E 's/relax_//g')

		if [[ $1 == mpi ]]
		then
			run_mpi "$folder" "$progs" "$names"
		else
			run "" "$folder" "$progs" "$names"
		fi
	done

	cleanup "$1"
}

main()
{
	arguments "$@"
	show_hardware
	show_variables

	[[ $TEST_SEQ    == 1 ]] && tests seq
	[[ $TEST_OPENMP == 1 ]] && tests openmp
	[[ $TEST_MPI    == 1 ]] && tests mpi
}

main "$@"
